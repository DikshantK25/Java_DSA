public class RBS {    public static void main(String[] args){        int[] arr={1,2,3,4,5,6,0};        System.out.println(findPivot(arr));    }    static int findPivot(int[] arr){        int start=0;        int end=arr.length-1;        while(start<=end){            int mid=start+(end-start)/2;            if(mid<end  && arr[mid]>arr[mid+1]){                return mid;            }            if(mid>start  && arr[mid]<arr[mid-1]){                return mid-1;            }            if(arr[start]>=arr[mid]){                end=mid-1;            }else{                start=mid+1;            }        }        return -1;    }    static int search(int[] nums,int target){        int pivot=findPivot(nums);        if(pivot==-1){            return binarysearch( nums,target,0,nums.length-1);        }        if(pivot==target){            return pivot;        }        if(pivot>=nums[0]){            return binarysearch(nums,target,0,pivot-1);        }else {            return binarysearch(nums,target,pivot,nums.length-1);        }    }      static int binarysearch(int[] nums,int target,int start,int end){        //find whether its ascending or Decending        boolean isAsc= (nums[0]<nums[nums.length-1]);        while(start<= end){            int mid=start+(end-start)/2;            if(target==nums[mid]) {                return mid;            }            if(isAsc) {                if (nums[mid] < target) {                    start = mid + 1;                } else {                    end = mid - 1;                }            }            else {                if (nums[mid] > target) {                    start = mid +1;                } else {                    end = mid -1;                }            }        }        return -1;        }        static int findPivotWithDuplicate(int[] arr){            int start=0;            int end=arr.length-1;            while(start<=end){                int mid=start+(end-start)/2;                if(mid<end  && arr[mid]>arr[mid+1]){                    return mid;                }                if(mid>start  && arr[mid]<arr[mid-1]){                    return mid-1;                }                // if elements at middle, start, end are equal then just skip the duplicates                if (arr[mid] == arr[start] && arr[mid] == arr[end]) {                    // skip the duplicates                    // NOTE: what if these elements at start and end were the pivot??                    // check if start is pivot                    if (start < end && arr[start] > arr[start + 1]) {                        return start;                    }                    start++;                    // check whether end is pivot                    if (end > start && arr[end] < arr[end - 1]) {                        return end - 1;                    }                    end--;                }                // left side is sorted, so pivot should be in right                else if(arr[start] < arr[mid] || (arr[start] == arr[mid] && arr[mid] > arr[end])) {                    start = mid + 1;                } else {                    end = mid - 1;                }            }            return -1;        }}